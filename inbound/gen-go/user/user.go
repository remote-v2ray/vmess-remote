// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - AlterID
type Account struct {
  ID string `thrift:"ID,1,required" db:"ID" json:"ID"`
  AlterID int32 `thrift:"AlterID,2,required" db:"AlterID" json:"AlterID"`
}

func NewAccount() *Account {
  return &Account{}
}


func (p *Account) GetID() string {
  return p.ID
}

func (p *Account) GetAlterID() int32 {
  return p.AlterID
}
func (p *Account) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetAlterID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetAlterID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetAlterID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AlterID is not set"));
  }
  return nil
}

func (p *Account)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Account)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AlterID = v
}
  return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Account"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err) }
  return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AlterID", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:AlterID: ", p), err) }
  if err := oprot.WriteI32(int32(p.AlterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AlterID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:AlterID: ", p), err) }
  return err
}

func (p *Account) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - Email
//  - Level
//  - Account
type MemoryUser struct {
  Email string `thrift:"Email,1,required" db:"Email" json:"Email"`
  Level int32 `thrift:"Level,2,required" db:"Level" json:"Level"`
  Account *Account `thrift:"Account,3,required" db:"Account" json:"Account"`
}

func NewMemoryUser() *MemoryUser {
  return &MemoryUser{}
}


func (p *MemoryUser) GetEmail() string {
  return p.Email
}

func (p *MemoryUser) GetLevel() int32 {
  return p.Level
}
var MemoryUser_Account_DEFAULT *Account
func (p *MemoryUser) GetAccount() *Account {
  if !p.IsSetAccount() {
    return MemoryUser_Account_DEFAULT
  }
return p.Account
}
func (p *MemoryUser) IsSetAccount() bool {
  return p.Account != nil
}

func (p *MemoryUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetEmail bool = false;
  var issetLevel bool = false;
  var issetAccount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetEmail = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetLevel = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetAccount = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetEmail{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Email is not set"));
  }
  if !issetLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Level is not set"));
  }
  if !issetAccount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Account is not set"));
  }
  return nil
}

func (p *MemoryUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *MemoryUser)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *MemoryUser)  ReadField3(iprot thrift.TProtocol) error {
  p.Account = &Account{}
  if err := p.Account.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Account), err)
  }
  return nil
}

func (p *MemoryUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MemoryUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemoryUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Email: ", p), err) }
  return err
}

func (p *MemoryUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Level: ", p), err) }
  return err
}

func (p *MemoryUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Account", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Account: ", p), err) }
  if err := p.Account.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Account), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Account: ", p), err) }
  return err
}

func (p *MemoryUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemoryUser(%+v)", *p)
}

// Attributes:
//  - User
//  - Time
//  - Found
type GetUserResponse struct {
  User *MemoryUser `thrift:"User,1,required" db:"User" json:"User"`
  Time int64 `thrift:"Time,2,required" db:"Time" json:"Time"`
  Found bool `thrift:"Found,3,required" db:"Found" json:"Found"`
}

func NewGetUserResponse() *GetUserResponse {
  return &GetUserResponse{}
}

var GetUserResponse_User_DEFAULT *MemoryUser
func (p *GetUserResponse) GetUser() *MemoryUser {
  if !p.IsSetUser() {
    return GetUserResponse_User_DEFAULT
  }
return p.User
}

func (p *GetUserResponse) GetTime() int64 {
  return p.Time
}

func (p *GetUserResponse) GetFound() bool {
  return p.Found
}
func (p *GetUserResponse) IsSetUser() bool {
  return p.User != nil
}

func (p *GetUserResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUser bool = false;
  var issetTime bool = false;
  var issetFound bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetTime = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetFound = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Time is not set"));
  }
  if !issetFound{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Found is not set"));
  }
  return nil
}

func (p *GetUserResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.User = &MemoryUser{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *GetUserResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Time = v
}
  return nil
}

func (p *GetUserResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Found = v
}
  return nil
}

func (p *GetUserResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("User", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:User: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:User: ", p), err) }
  return err
}

func (p *GetUserResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Time", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Time: ", p), err) }
  if err := oprot.WriteI64(int64(p.Time)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Time: ", p), err) }
  return err
}

func (p *GetUserResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Found", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Found: ", p), err) }
  if err := oprot.WriteBool(bool(p.Found)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Found (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Found: ", p), err) }
  return err
}

func (p *GetUserResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserResponse(%+v)", *p)
}

type UserSvc interface {
  // Parameters:
  //  - U
  Add(ctx context.Context, u *MemoryUser) (err error)
  Close(ctx context.Context) (err error)
  // Parameters:
  //  - UserHash
  Get(ctx context.Context, userHash []byte) (r *GetUserResponse, err error)
  // Parameters:
  //  - Email
  Remove(ctx context.Context, email string) (err error)
}

type UserSvcClient struct {
  c thrift.TClient
}

func NewUserSvcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserSvcClient {
  return &UserSvcClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserSvcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserSvcClient {
  return &UserSvcClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserSvcClient(c thrift.TClient) *UserSvcClient {
  return &UserSvcClient{
    c: c,
  }
}

func (p *UserSvcClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - U
func (p *UserSvcClient) Add(ctx context.Context, u *MemoryUser) (err error) {
  var _args0 UserSvcAddArgs
  _args0.U = u
  var _result1 UserSvcAddResult
  if err = p.Client_().Call(ctx, "Add", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

func (p *UserSvcClient) Close(ctx context.Context) (err error) {
  var _args2 UserSvcCloseArgs
  var _result3 UserSvcCloseResult
  if err = p.Client_().Call(ctx, "Close", &_args2, &_result3); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserHash
func (p *UserSvcClient) Get(ctx context.Context, userHash []byte) (r *GetUserResponse, err error) {
  var _args4 UserSvcGetArgs
  _args4.UserHash = userHash
  var _result5 UserSvcGetResult
  if err = p.Client_().Call(ctx, "Get", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Email
func (p *UserSvcClient) Remove(ctx context.Context, email string) (err error) {
  var _args6 UserSvcRemoveArgs
  _args6.Email = email
  var _result7 UserSvcRemoveResult
  if err = p.Client_().Call(ctx, "Remove", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

type UserSvcProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserSvc
}

func (p *UserSvcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserSvcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserSvcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserSvcProcessor(handler UserSvc) *UserSvcProcessor {

  self8 := &UserSvcProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["Add"] = &userSvcProcessorAdd{handler:handler}
  self8.processorMap["Close"] = &userSvcProcessorClose{handler:handler}
  self8.processorMap["Get"] = &userSvcProcessorGet{handler:handler}
  self8.processorMap["Remove"] = &userSvcProcessorRemove{handler:handler}
return self8
}

func (p *UserSvcProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x9

}

type userSvcProcessorAdd struct {
  handler UserSvc
}

func (p *userSvcProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserSvcAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserSvcAddResult{}
  var err2 error
  if err2 = p.handler.Add(ctx, args.U); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Add: " + err2.Error())
    oprot.WriteMessageBegin("Add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("Add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userSvcProcessorClose struct {
  handler UserSvc
}

func (p *userSvcProcessorClose) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserSvcCloseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Close", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserSvcCloseResult{}
  var err2 error
  if err2 = p.handler.Close(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Close: " + err2.Error())
    oprot.WriteMessageBegin("Close", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("Close", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userSvcProcessorGet struct {
  handler UserSvc
}

func (p *userSvcProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserSvcGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserSvcGetResult{}
var retval *GetUserResponse
  var err2 error
  if retval, err2 = p.handler.Get(ctx, args.UserHash); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Get: " + err2.Error())
    oprot.WriteMessageBegin("Get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userSvcProcessorRemove struct {
  handler UserSvc
}

func (p *userSvcProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserSvcRemoveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserSvcRemoveResult{}
  var err2 error
  if err2 = p.handler.Remove(ctx, args.Email); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Remove: " + err2.Error())
    oprot.WriteMessageBegin("Remove", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("Remove", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - U
type UserSvcAddArgs struct {
  U *MemoryUser `thrift:"u,1" db:"u" json:"u"`
}

func NewUserSvcAddArgs() *UserSvcAddArgs {
  return &UserSvcAddArgs{}
}

var UserSvcAddArgs_U_DEFAULT *MemoryUser
func (p *UserSvcAddArgs) GetU() *MemoryUser {
  if !p.IsSetU() {
    return UserSvcAddArgs_U_DEFAULT
  }
return p.U
}
func (p *UserSvcAddArgs) IsSetU() bool {
  return p.U != nil
}

func (p *UserSvcAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.U = &MemoryUser{}
  if err := p.U.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.U), err)
  }
  return nil
}

func (p *UserSvcAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("u", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:u: ", p), err) }
  if err := p.U.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.U), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:u: ", p), err) }
  return err
}

func (p *UserSvcAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcAddArgs(%+v)", *p)
}

type UserSvcAddResult struct {
}

func NewUserSvcAddResult() *UserSvcAddResult {
  return &UserSvcAddResult{}
}

func (p *UserSvcAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcAddResult(%+v)", *p)
}

type UserSvcCloseArgs struct {
}

func NewUserSvcCloseArgs() *UserSvcCloseArgs {
  return &UserSvcCloseArgs{}
}

func (p *UserSvcCloseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcCloseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Close_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcCloseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcCloseArgs(%+v)", *p)
}

type UserSvcCloseResult struct {
}

func NewUserSvcCloseResult() *UserSvcCloseResult {
  return &UserSvcCloseResult{}
}

func (p *UserSvcCloseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcCloseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Close_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcCloseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcCloseResult(%+v)", *p)
}

// Attributes:
//  - UserHash
type UserSvcGetArgs struct {
  UserHash []byte `thrift:"userHash,1" db:"userHash" json:"userHash"`
}

func NewUserSvcGetArgs() *UserSvcGetArgs {
  return &UserSvcGetArgs{}
}


func (p *UserSvcGetArgs) GetUserHash() []byte {
  return p.UserHash
}
func (p *UserSvcGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserHash = v
}
  return nil
}

func (p *UserSvcGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userHash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userHash: ", p), err) }
  if err := oprot.WriteBinary(p.UserHash); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userHash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userHash: ", p), err) }
  return err
}

func (p *UserSvcGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserSvcGetResult struct {
  Success *GetUserResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserSvcGetResult() *UserSvcGetResult {
  return &UserSvcGetResult{}
}

var UserSvcGetResult_Success_DEFAULT *GetUserResponse
func (p *UserSvcGetResult) GetSuccess() *GetUserResponse {
  if !p.IsSetSuccess() {
    return UserSvcGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserSvcGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserSvcGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcGetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetUserResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserSvcGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserSvcGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcGetResult(%+v)", *p)
}

// Attributes:
//  - Email
type UserSvcRemoveArgs struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
}

func NewUserSvcRemoveArgs() *UserSvcRemoveArgs {
  return &UserSvcRemoveArgs{}
}


func (p *UserSvcRemoveArgs) GetEmail() string {
  return p.Email
}
func (p *UserSvcRemoveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcRemoveArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UserSvcRemoveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcRemoveArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *UserSvcRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcRemoveArgs(%+v)", *p)
}

type UserSvcRemoveResult struct {
}

func NewUserSvcRemoveResult() *UserSvcRemoveResult {
  return &UserSvcRemoveResult{}
}

func (p *UserSvcRemoveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserSvcRemoveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserSvcRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserSvcRemoveResult(%+v)", *p)
}


